|1:8|

    yarn add nuxt


    package.json:

        "name":"mastering-nuxt",
        "scripts":{
            "dev":"nuxt",
            "start":"nuxt start",
            "build":"nuxt build"
        }



    yarn dev

    yarn start  // run immediatly without build



9: config

    nuxt.config.js

        export default{
            componets:true,   // now you don't need to add HomeCard component: components:{HomeCard}
        }


10: head meta charset utf8 titleTemplate %s bodyAttrs htmlAttrs lang en hid name content hid title
    head

    index.vue:
        head(){
            return{
                title:'Home Page',
                meta:[{
                    name:'descrition,
                    content:'This is a homepage',
                    hid:'descrition'
                }]
            }
        }

    nuxt.config.js:
        head:{
            titleTemplate:'Matering Nuxt %s'  // title in head of index.vue replace %s,
            htmlAttrs:{lang:'en'},
            bodyAttrs:{class:['my-style']},
            meta:[{charset:'utf8'}]
        }


11:12: router id home params

    folder make path

    pages: mkdire home
    home: mkdire _id.vue

    for access to id ==> this.$route.params.id



13: a tag -- router-link -- nuxt-link -- no-prefetch prefetch

    a --> reload all page
    router-link --> do not reload all page
    nuxt-link --> have some option --> prefetch page -- and if you dont want to use it you can use no-prefetch

    nuxt-link ==> default preferch is true


    <nuxt-link to="/home.." no-preferch...><>

14:  prefetch config -- router -- preferchLink
    // you can set prefetch default to false and use `prefetch` to set true anywhere you want


15:
    layouts default red layout:'red' <nuxt/>

    mkdir layouts:
    touch default.vue:
        <div>
                ....
            <Nuxt/>
        </div>

16:18
    ref refs

    set ref="map" and use this.$refs.map


    api key ==> google map api  **** typescript cours ****
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBNLrJhOMz6idD05pzfn5lhA-TAw-mAZCU"></script>
    <script type="module" src="./src/index.ts"></script>

   ***** Nuxt course ***** use this api key for autocomplete place

    script.src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyDkDD_tREr9fuTi7dGQharS79THbjMBDiU&libraries=places&callback=initGoogleMap"


    head -- scripts -- link -- how to use  map api -- token accessToken -- marker -mapbox  // todo

    mapbox api key:
      my accessToken:  'pk.eyJ1Ijoic2hhaHJva2hlbCIsImEiOiJjbDBudzExeDAwZjNzM2JtenczcHByZnlxIn0.hsLE0MhdDSdPitnkB3-Kfw'


19:



fallback:
js applications. A fallback function specifies an action that is performed whenever a call to a remote service fails. For example, you can use a fallback function to send a customized message about service failures to the client.

callback (initmap):
A JavaScript callback is a function which is to be executed after another function has finished execution. A more formal definition would be - Any function that is passed as an argument to another function so that it can be executed in that other function is called as a callback function.


=======================================================
3- Working with Google Maps
=======================================================

4:
    nuxt is adding the script tag and removing it as needed
        but since it's adding and removing a script tag
            the code in that url is run each time it does it
    and since nuxt is a single page app everything stays in the browser's memory
    we need a way to ensure that this script tag is ran only once the lifetime of the visitor's session


    the server is node
    node it has not idea what the windows is

    if you add script and add innerHtml for security reason that html coded.
    so if you want to decode:

    (dont use this:)
    __dangerouslyDisableSanitizersByTagID:{"map-init":['innerHtml']}

    skip tag: //todo

    <script skip= process.client && windows.mapLoaded ...

5:

    async and defer

    async very similar to defer
    it download javescript file asyncronously but it does not wait for anything else to executed


6:
    plugins:


    mkdir plugins

        use .client.js ==> just for browser
        use .server.js ==> just for server side
        use nothing    ==> for both



    nuxt config:
            plugins:[{src:'~/plugins/maps.client',mode:'client'}]

            or

            plugins:['~/plugins/maps.client']



    two argument: context, inject

    context content all router, vuex,....
    inject => with inject you can use $ and use it in code. take two argument. first:name, second: functions you want two use with this.$maps.[nameFunction]

    inject('maps', {showMap})

    this.$maps.showMap()....


=======================================================
4- Working with APIs
=======================================================
1:
    layout: error.vue
8:

    created vs mounted //todo
    computed //todo
    substring //todo
    formatDate // todo



9:

10:
    Promise.all


=======================================================
5-  Geo Search
=======================================================
1:
2:3: autocomplete google place -- dispatchEvent -- CustomEvent --router

    // 1

        add &libraries=places to src script

        <script async
            src="https://maps.googleapis.com/maps/api/js?       key=YOUR_API_KEY&libraries=places&callback=initMap">
        </script>

    // 2
                const autocomplete = new window.google.maps.places.Autocomplete(
                    input,
                    {types:'(cities)'}
                );

            input html element you want to search in


    you can add listener:

    autocomplete.addListener('place_changed',()=>{
            const place = autocomplete.getPlace();
            input.dispatchEvent(new CustomEvent('changed', {detail:place}))
        })



        ####################################################


    dispatchEvent:
        dispatchEvent using for call synthetic events;


    CustomEvent:
        you can build an event


    // 1 select your html element
    const elme = document.querySelect....

    // 2 define your event
    const myEvent = new CustomEvent('nameOfMyEvent', option);
        --> option = {detail:place}

    // 3 dispatch event (call it when you want)
    elme.dispatchEvent(myEvent);



    in option you can pass everything you want

    <input @nameOfMyEvent='nameOfMyEvent' />

    nameOfMyEvent(event){
        const place = event.detail;
        }
        ####################################################

    this.$router.push({
        name:'search',
        qeury:{
            lat: place.geometry.location.lat(),....
            }

    })

    now make search.vue file



4:5  watchQuery -- beforeRouteUpdate

    watchQuery:['lng'],


        ********************************************
    watchQuery bug

    watchQuery does not update route after seconds

    so you can use beforeRouteUpdate instead of watchQuery

        ********************************************

6:

7:
8:

        Erorr ***************************
        *********************************

        [Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render


        one of the reasons:

            use comment in template of vue files

        ****************************************************
        ****************************************************

10 - mouseover native -- mouseout native

    @mouseover.native
    @mouseover.native

    use .native if element is a component




=======================================================
6- Working With Modules
=======================================================
1:2: modules -- module options -- add plugin
    * modules run before built start
        so you can generating filess, copying assets, fetching data, even changing the webpack config,

    --------------------------------
    // 1
        mkdire modules  // it's not specials, it's a convention
    // 2
        create test.js in modules

    // 3 nuxt.confing.js

        modules:['~modules/test.js']

    // 4
        now you start build --> yarn build



    --------------------------------

    config module with option:

    modules:[['~/modules/test', {message:'my modules option!!!'}]]

    you can access to option in modules with `moduleOptions`

    export default functino(moduleOptions){
        moduleOptions.message // message=>my modules option!!!
    }

    --------------------------------
    add plugin

    you can add plugins with modules --> this.addPlugin(..)

    // 1 create testPlugin.js in plugins
    // 2 add plugin with module

        in modules open test.js and use this:
        this.addPlugin(./plugins/testPlugin.js)
    **** important:
        you have to remember modules are in the node environment
        they (modules) are'nt compiled by webpack
        so you can't use webpack aliases or even shorcuts (~ or not adding .js in the path)

    **** important:
        modules is not in modules folder
        it is in root folder
        so you have not use ../  (it is strange I now)
        you must assume the modules is in root


3:
    list of hooks: nuxt - renderer - module container -builder - generator

    nuxt --> fire when nuxt starts, listen, has error
    render--> let you add air middleware
            or inject extra date into you nuxt client side state
    module container--> let you extend or modify the container
    builder--> let you update data going into the build system
                or even launch functions the entire build starts
    generator--> talk about it more later
                greate pre-processing date or even adding extra routes

    -----------------
    this.nuxt.hook('build:before',()=>{
        console.log('build before')
    })

    this.nuxt.hook('render:route',(url, result, context)=>{
        context.res.setHeader('X-Powered-By', 'Theeeeeee')
    })

    ---------------------

4: tailwind css -- build modules

    build modules are only used in dev or the build process

    by using this property we're  telling nuxt it doesn't need these modules when we deploy out application


    // 1
        yarn add --dev @nuxtjs/tailwindcss

    // 2
        nuxt.config:
            buildModules:['@nuxtjs/tailwindcss']

(in folder 7)
    use sass:
        yarn add --dev sass sass-loader


=======================================================
7-  Working with Styles and Design
=======================================================
1: base64 -- sass -- sass loader

    base64 is a way to represent a binary file using normal text characters
    it's mostly used in email but sometimes on website too

    webpack uses different loaders for different types of files or processes
    one of those is called the url loader
    by default nuxt tells it to inline images (in the assets folder) and under 1k in file size (I don't recommend this)

    ** when the image size is under 1k --> webpack use base64

    so, how bad is this?
        --> 1 - it increase you DOM size
            2 - stops you from lazy loading images
            3 - prevents you from setting the cach lifetime of this asset (which should be much longer than the lifetime of this page

    if you're using http in production
    inlining images like this become even more useless
    because http is specifically designes to download many files at the same time.

    (in build property you can tells to webpack not to inline all images or css (assets) (limits:0 and extractsCss))
    --------------------------------
    use sass:
        yarn add --dev sass sass-loader

    ======
    (in previouse folder):
        // 1
        yarn add --dev @nuxtjs/tailwindcss

    // 2
        nuxt.config:
            buildModules:['@nuxtjs/tailwindcss']

    ======
    // 3  yarn add --dev sass sass-loader

    // 4 config.nuxt.js:  // add your any css or css processed files that you want included in the build

        css:['~assets/sass/app.scss']

    // 5 create build in config.nuxt.js

        the build property give you control over the build process
        you can tweak css setting  transpile setting webpack chunk names and much more

        build:{}


        you can tell webpack not inline all the css but keep it  as separete css files


        build:{
            extractCss: true,
            loaders:{
                limit:0 //this means only file zero bytes will be inlined(disables inlining)
                    }
        }

